{"version":3,"sources":["game/utils.js","config.js","game/Board.js","game/GameBoard.jsx","game/CellSelector.jsx","game/Dialog.jsx","game/Game.jsx","game/Setup.jsx","App.js","reportWebVitals.js","index.js"],"names":["Utils","items","Math","floor","random","length","colorMap","Map","colors","Array","from","keys","board","options","this","cellColors","size","i","row","j","push","getRandomItem","color","originalBoard","slice","visitedCells","initialColor","cellsToRepaint","findCellsToRepaint","startCell","neighbours","getNeighbours","cell","cellToString","cellStringsToArr","col","cellStrings","map","str","split","parseInt","filter","includes","initialCell","useCellStyles","makeStyles","theme","width","height","margin","transition","GameBoard","boardData","onColorSelect","classes","Box","display","role","onClick","className","style","backgroundColor","get","useStyles","btn","border","cursor","CellSelector","onColorSelectRef","useRef","current","cells","useEffect","document","addEventListener","e","cellIndex","code","console","log","title","GameDialog","text","open","action","Dialog","maxWidth","onClose","disableBackdropClick","aria-labelledby","aria-describedby","DialogTitle","DialogActions","Button","Game","maxRounds","useState","generateRandomBoard","setBoardData","round","setRound","victory","setVictory","selectNextColor","newBoardData","repaint","isHomogeneous","restartGame","mt","alignItems","mr","Typography","variant","Setup","App","CssBaseline","m","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.787d233e.chunk.js","sourcesContent":["export default class Utils {\r\n    static getRandomItem(items) {\r\n        return items[Math.floor(Math.random() * items.length)];\r\n    }\r\n}","export const colorMap = new Map([\r\n    [\"teal\", \"#19FA8C\"],\r\n    [\"blue\", \"#4C32FA\"],\r\n    [\"yellow\", \"#FADA0C\"],\r\n    [\"red\", \"#FA1E00\"],\r\n]);\r\n\r\nexport const colors = Array.from(colorMap.keys());","import Utils from './utils';\r\nimport {colors} from '../config.js';\r\n\r\nclass Board {\r\n    constructor(options) {\r\n        this.cellColors = options.colors;\r\n    }\r\n\r\n    generateRandomBoard(size) {\r\n        let board = [];\r\n\r\n        for (let i = 0; i < size; ++i) {\r\n            let row = [];\r\n\r\n            for (let j = 0; j < size; ++j) {\r\n                row.push(Utils.getRandomItem(this.cellColors));\r\n            }\r\n\r\n            board.push(row);\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    repaint(color, originalBoard) {\r\n        const board = originalBoard.slice();\r\n\r\n        const visitedCells = ['0|0'];\r\n\r\n        const initialColor = board[0][0];\r\n\r\n        let currentCell = [0,0];\r\n\r\n        const findCellsToRepaint = (startCell) => {\r\n            let neighbours = this.getNeighbours(board.length-1, board, initialColor, startCell, visitedCells);\r\n\r\n            if (neighbours.length > 0) {\r\n                for (const cell of neighbours) {\r\n                    visitedCells.push(this.cellToString(cell));\r\n\r\n                    findCellsToRepaint(cell);\r\n                }\r\n            }\r\n\r\n            return this.cellStringsToArr(visitedCells);\r\n        }\r\n\r\n        const cellsToRepaint = findCellsToRepaint(currentCell);\r\n\r\n        for (const [row, col] of cellsToRepaint) {\r\n            board[row][col] = color;\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    cellToString([row, col]) {\r\n        return `${row}|${col}`;\r\n    }\r\n\r\n    cellStringsToArr(cellStrings) {\r\n        return cellStrings\r\n            .map(str => {\r\n                const [row, col] = str.split('|');\r\n\r\n                return [parseInt(row), parseInt(col)];\r\n            });\r\n    }\r\n\r\n    getNeighbours(size, board, color, [row, col], visitedCells) {\r\n        const right = row < size ? [row+1, col] : [];\r\n        const left = row !== 0 ? [row-1, col] : [];\r\n        const top = col !== 0 ? [row, col-1] : [];\r\n        const bottom = col < size ? [row, col+1] : [];\r\n\r\n        return [right, left, top, bottom]\r\n            .filter(cell => {\r\n                return cell.length > 0 &&\r\n                    board[cell[0]][cell[1]] === color &&\r\n                    !visitedCells.includes(this.cellToString(cell))\r\n            });\r\n    }\r\n\r\n    isHomogeneous(board) {\r\n        const initialCell = board[0][0];\r\n\r\n        return board\r\n            .filter(row => row.filter(cell => !(cell === initialCell)).length > 0)\r\n            .length === 0\r\n    }\r\n}\r\n\r\nconst board = new Board({colors});\r\n\r\nexport default board;","import {Box} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nimport {colors, colorMap} from '../config.js';\r\n\r\nexport const useCellStyles = makeStyles(theme => ({\r\n    cell: {\r\n        width: 30,\r\n        height: 30,\r\n        margin: 1,\r\n        transition: 'background-color .25s'\r\n    }\r\n}));\r\n\r\nexport default function GameBoard({boardData, onColorSelect}) {\r\n    const classes = useCellStyles();\r\n\r\n    return (\r\n        <>\r\n            {boardData.map((row, i) => (\r\n                <Box key={i} display={'flex'}>\r\n                    {row.map((cell, j) => (\r\n                        <div key={`${i}-${j}`}\r\n                             role={\"button\"}\r\n                             onClick={() => onColorSelect(cell)}\r\n                             className={`${classes.cell}`}\r\n                             style={{backgroundColor: colorMap.get(cell)}}\r\n                        />\r\n                    ))}\r\n                </Box>\r\n            ))}\r\n        </>\r\n    );\r\n}","import React, {useEffect, useRef} from 'react';\r\nimport {Box} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {colorMap, colors} from '../config.js';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    btn: {\r\n        border: 'none',\r\n        cursor: 'pointer',\r\n        width: 30,\r\n        height: 30\r\n    }\r\n}));\r\n\r\nexport default function CellSelector({onColorSelect}) {\r\n    const onColorSelectRef = useRef(onColorSelect).current;\r\n    const classes = useStyles();\r\n\r\n    const cells = colors;\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', function (e) {\r\n            const cellIndex = parseInt(e.code.split('Digit')[1]);\r\n\r\n            onColorSelectRef(cells[cellIndex-1]);\r\n        });\r\n\r\n        return () => {                                                               // second, we return an anonymous clean up function\r\n            console.log('I clean now...');\r\n        };\r\n    }, [cells, onColorSelectRef])\r\n\r\n    return (\r\n        <Box display={'flex'}>\r\n            {cells.map(cell => (\r\n                <button title={cell} key={cell}\r\n                        onClick={() => onColorSelect(cell)}\r\n                        style={{backgroundColor: colorMap.get(cell)}}\r\n                        className={classes.btn}\r\n                />\r\n            ))}\r\n        </Box>\r\n    );\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nexport default function GameDialog({text, open, action}) {\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            maxWidth={'md'}\r\n            onClose={action}\r\n            disableBackdropClick\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle>{text}</DialogTitle>\r\n\r\n            <DialogActions>\r\n                <Button onClick={action} color=\"primary\">\r\n                    Restart\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}","import React, {useState} from 'react';\r\nimport {Box, Typography, Button} from \"@material-ui/core\";\r\n\r\nimport board from \"./Board\";\r\n\r\nimport GameBoard from \"./GameBoard\";\r\nimport CellSelector from \"./CellSelector\";\r\nimport GameDialog from \"./Dialog\";\r\n\r\nexport default function Game({size, maxRounds}) {\r\n    const [boardData, setBoardData] = useState(board.generateRandomBoard(size));\r\n    const [round, setRound] = useState(1);\r\n    const [victory, setVictory] = useState(false);\r\n\r\n    function selectNextColor(color) {\r\n        const newBoardData = board.repaint(color, boardData);\r\n\r\n        if (board.isHomogeneous(newBoardData)) {\r\n            winGame();\r\n        }\r\n\r\n        setBoardData(newBoardData);\r\n        setRound(round + 1);\r\n    }\r\n\r\n    function restartGame() {\r\n        setRound(1);\r\n        setVictory(false);\r\n        setBoardData(board.generateRandomBoard(size));\r\n    }\r\n\r\n    function winGame() {\r\n        setVictory(true);\r\n    }\r\n\r\n    return (\r\n        <Box>\r\n            <GameBoard boardData={boardData} onColorSelect={selectNextColor}/>\r\n\r\n            <Box mt={3}>\r\n                <CellSelector onColorSelect={selectNextColor}/>\r\n            </Box>\r\n\r\n            <Box mt={3} display={\"flex\"} alignItems={\"center\"}>\r\n                <Box mr={3}>\r\n                    <Typography variant={\"body1\"}>Round {round}/{maxRounds}</Typography>\r\n                </Box>\r\n\r\n                <Button variant={\"contained\"} size={\"small\"} onClick={restartGame}>\r\n                    Restart\r\n                </Button>\r\n            </Box>\r\n\r\n            <GameDialog text={\"You lost\"} action={restartGame} open={round > maxRounds}/>\r\n\r\n            <GameDialog text={\"Congratulations! You won!\"} action={restartGame} open={victory}/>\r\n        </Box>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport Game from \"./Game\";\r\n\r\nexport default function Setup() {\r\n    return (\r\n        <>\r\n            <Game size={18} maxRounds={21}/>\r\n        </>\r\n    );\r\n}","import './App.css';\nimport React from 'react';\nimport {Box} from \"@material-ui/core\";\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport Setup from \"./game/Setup\";\n\nfunction App() {\n  return (\n    <main>\n        <CssBaseline/>\n\n        <Box m={2}>\n            <Setup/>\n        </Box>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}