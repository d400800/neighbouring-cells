{"version":3,"sources":["config.js","game/utils.js","game/Board.js","game/GameBoard.jsx","game/CellSelector.jsx","game/Dialog.jsx","game/Game.jsx","game/Topbar.jsx","App.js","reportWebVitals.js","index.js"],"names":["colorMap","Map","colors","Array","from","keys","standardGame","Utils","items","Math","floor","random","length","board","options","this","cellColors","size","i","row","j","push","getRandomItem","color","originalBoard","slice","visitedCells","initialColor","cellsToRepaint","findCellsToRepaint","startCell","neighbours","getNeighbours","cell","cellToString","cellStringsToArr","col","cellStrings","map","str","split","parseInt","filter","includes","initialCell","useCellStyles","makeStyles","theme","width","margin","transition","content","display","paddingTop","GameBoard","boardData","onColorSelect","gameControlsHeight","classes","window","innerHeight","Box","role","onClick","className","style","backgroundColor","get","useStyles","btn","border","cursor","height","root","breakpoints","down","justifyContent","CellSelector","onColorSelectRef","useRef","current","cells","useEffect","document","addEventListener","e","cellIndex","code","console","log","title","GameDialog","text","open","action","Dialog","maxWidth","onClose","disableBackdropClick","aria-labelledby","aria-describedby","DialogTitle","DialogActions","Button","controls","Game","maxRounds","useState","generateRandomBoard","setBoardData","round","setRound","victory","setVictory","setGameControlsHeight","selectNextColor","newBoardData","repaint","isHomogeneous","restartGame","gameControlsId","$gameControls","getElementById","offsetHeight","id","mt","textAlign","Typography","variant","my","Topbar","rulesDialogOpen","setRulesDialogOpen","alignItems","ml","IconButton","DialogContent","TabNavigation","setPage","React","value","setValue","a11yProps","index","Tabs","onChange","event","newValue","textColor","indicatorColor","Tab","label","disabled","App","page","CssBaseline","px","py","mb","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.95bed2ec.chunk.js","sourcesContent":["export const colorMap = new Map([\r\n    [\"teal\", \"#19FA8C\"],\r\n    [\"blue\", \"#4C32FA\"],\r\n    [\"yellow\", \"#FADA0C\"],\r\n    [\"red\", \"#FA1E00\"],\r\n]);\r\n\r\nexport const colors = Array.from(colorMap.keys());\r\n\r\nexport const gameDescription = `\r\n    The goal is to paint all board cells the same color.\r\n    At the beginning of each round, the color of the top left (initial) cell is selected.\r\n    The newly selected color will spread to other cells which have the same color as the initial one and are adjacent to each other (have a common top, right, bottom or left border). \r\n`;\r\n\r\nexport const title = 'Neighbouring Cells';\r\n\r\nexport const standardGame = {\r\n    rounds: 21,\r\n    size: 18\r\n}","export default class Utils {\r\n    static getRandomItem(items) {\r\n        return items[Math.floor(Math.random() * items.length)];\r\n    }\r\n}","import Utils from './utils';\r\nimport {colors} from '../config.js';\r\n\r\nclass Board {\r\n    constructor(options) {\r\n        this.cellColors = options.colors;\r\n    }\r\n\r\n    generateRandomBoard(size) {\r\n        let board = [];\r\n\r\n        for (let i = 0; i < size; ++i) {\r\n            let row = [];\r\n\r\n            for (let j = 0; j < size; ++j) {\r\n                row.push(Utils.getRandomItem(this.cellColors));\r\n            }\r\n\r\n            board.push(row);\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    repaint(color, originalBoard) {\r\n        const board = originalBoard.slice();\r\n\r\n        const visitedCells = ['0|0'];\r\n\r\n        const initialColor = board[0][0];\r\n\r\n        let currentCell = [0,0];\r\n\r\n        const findCellsToRepaint = (startCell) => {\r\n            let neighbours = this.getNeighbours(board.length-1, board, initialColor, startCell, visitedCells);\r\n\r\n            if (neighbours.length > 0) {\r\n                for (const cell of neighbours) {\r\n                    visitedCells.push(this.cellToString(cell));\r\n\r\n                    findCellsToRepaint(cell);\r\n                }\r\n            }\r\n\r\n            return this.cellStringsToArr(visitedCells);\r\n        }\r\n\r\n        const cellsToRepaint = findCellsToRepaint(currentCell);\r\n\r\n        for (const [row, col] of cellsToRepaint) {\r\n            board[row][col] = color;\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    cellToString([row, col]) {\r\n        return `${row}|${col}`;\r\n    }\r\n\r\n    cellStringsToArr(cellStrings) {\r\n        return cellStrings\r\n            .map(str => {\r\n                const [row, col] = str.split('|');\r\n\r\n                return [parseInt(row), parseInt(col)];\r\n            });\r\n    }\r\n\r\n    getNeighbours(size, board, color, [row, col], visitedCells) {\r\n        const right = row < size ? [row+1, col] : [];\r\n        const left = row !== 0 ? [row-1, col] : [];\r\n        const top = col !== 0 ? [row, col-1] : [];\r\n        const bottom = col < size ? [row, col+1] : [];\r\n\r\n        return [right, left, top, bottom]\r\n            .filter(cell => {\r\n                return cell.length > 0 &&\r\n                    board[cell[0]][cell[1]] === color &&\r\n                    !visitedCells.includes(this.cellToString(cell))\r\n            });\r\n    }\r\n\r\n    isHomogeneous(board) {\r\n        const initialCell = board[0][0];\r\n\r\n        return board\r\n            .filter(row => row.filter(cell => !(cell === initialCell)).length > 0)\r\n            .length === 0\r\n    }\r\n}\r\n\r\nconst board = new Board({colors});\r\n\r\nexport default board;","import React from \"react\";\r\n\r\nimport {Box} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nimport {colorMap} from '../config.js';\r\n\r\nexport const useCellStyles = makeStyles(theme => ({\r\n    cell: {\r\n        // width: props => props.width,\r\n        width: '100%',\r\n        margin: 1,\r\n        transition: 'background-color .25s',\r\n\r\n        '&:after': {\r\n            content: \"''\",\r\n            display: 'block',\r\n            paddingTop: '100%'\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function GameBoard({boardData, onColorSelect, size, gameControlsHeight}) {\r\n    const cellWidth = (window.innerHeight - gameControlsHeight - 300) / size;\r\n    const classes = useCellStyles({size: size});\r\n\r\n    return (\r\n        <>\r\n            {boardData.map((row, i) => (\r\n                <Box key={i} display={'flex'}>\r\n                    {row.map((cell, j) => (\r\n                        <div key={`${i}-${j}`}\r\n                             role={\"button\"}\r\n                             onClick={() => onColorSelect(cell)}\r\n                             className={`${classes.cell}`}\r\n                             style={{backgroundColor: colorMap.get(cell)}}\r\n                        />\r\n                    ))}\r\n                </Box>\r\n            ))}\r\n        </>\r\n    );\r\n}","import React, {useEffect, useRef} from 'react';\r\nimport {Box} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {colorMap, colors} from '../config.js';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    btn: {\r\n        border: 'none',\r\n        cursor: 'pointer',\r\n        width: 24,\r\n        height: 24\r\n    },\r\n    root: {\r\n        display: 'flex',\r\n        [theme.breakpoints.down('sm')]: {\r\n            justifyContent: 'space-around'\r\n        },\r\n    }\r\n}));\r\n\r\nexport default function CellSelector({onColorSelect}) {\r\n    const onColorSelectRef = useRef(onColorSelect).current;\r\n    const classes = useStyles();\r\n\r\n    const cells = colors;\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', function (e) {\r\n            const cellIndex = parseInt(e.code.split('Digit')[1]);\r\n\r\n            onColorSelectRef(cells[cellIndex-1]);\r\n        });\r\n\r\n        return () => {                                                               // second, we return an anonymous clean up function\r\n            console.log('I clean now...');\r\n        };\r\n    }, [cells, onColorSelectRef])\r\n\r\n    return (\r\n        <Box className={classes.root}>\r\n            {cells.map(cell => (\r\n                <button title={cell} key={cell}\r\n                        onClick={() => onColorSelect(cell)}\r\n                        style={{backgroundColor: colorMap.get(cell)}}\r\n                        className={classes.btn}\r\n                />\r\n            ))}\r\n        </Box>\r\n    );\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nexport default function GameDialog({text, open, action}) {\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            maxWidth={'md'}\r\n            onClose={action}\r\n            disableBackdropClick\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle>{text}</DialogTitle>\r\n\r\n            <DialogActions>\r\n                <Button onClick={action} color=\"primary\">\r\n                    Restart\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {Box, Typography, Button} from \"@material-ui/core\";\r\n\r\nimport board from \"./Board\";\r\n\r\nimport GameBoard from \"./GameBoard\";\r\nimport CellSelector from \"./CellSelector\";\r\nimport GameDialog from \"./Dialog\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    controls: {\r\n        // [theme.breakpoints.down('sm')]: {\r\n        //     position: 'fixed',\r\n        //     left: theme.spacing(2),\r\n        //     right: theme.spacing(2),\r\n        //     bottom: theme.spacing(2)\r\n        // },\r\n    }\r\n}));\r\n\r\nexport default function Game({size, maxRounds}) {\r\n    const classes = useStyles();\r\n\r\n    const [boardData, setBoardData] = useState(board.generateRandomBoard(size));\r\n    const [round, setRound] = useState(1);\r\n    const [victory, setVictory] = useState(false);\r\n    const [gameControlsHeight, setGameControlsHeight] = useState();\r\n\r\n    function selectNextColor(color) {\r\n        const newBoardData = board.repaint(color, boardData);\r\n\r\n        if (board.isHomogeneous(newBoardData)) {\r\n            winGame();\r\n        }\r\n\r\n        setBoardData(newBoardData);\r\n        setRound(round + 1);\r\n    }\r\n\r\n    function restartGame() {\r\n        setRound(1);\r\n        setVictory(false);\r\n        setBoardData(board.generateRandomBoard(size));\r\n    }\r\n\r\n    function winGame() {\r\n        setVictory(true);\r\n    }\r\n\r\n    const gameControlsId = 'game-controls';\r\n\r\n    useEffect(() => {\r\n        const $gameControls = document.getElementById(gameControlsId);\r\n\r\n        setBoardData(board.generateRandomBoard(size));\r\n\r\n        setGameControlsHeight($gameControls && $gameControls.offsetHeight);\r\n    }, [size]);\r\n\r\n    return (\r\n        <Box width=\"100%\">\r\n            <Box>\r\n                <GameBoard\r\n                    size={size}\r\n                    boardData={boardData}\r\n                    gameControlsHeight={gameControlsHeight}\r\n                    onColorSelect={selectNextColor}\r\n                />\r\n            </Box>\r\n\r\n            <Box id={gameControlsId} mt={2} className={classes.controls}>\r\n                <Box textAlign=\"center\">\r\n                    <Typography variant={\"body1\"}>Round {round}/{maxRounds}</Typography>\r\n                </Box>\r\n\r\n                <Box my={4}>\r\n                    <CellSelector onColorSelect={selectNextColor}/>\r\n                </Box>\r\n\r\n                <Box mt={3} textAlign=\"center\">\r\n                    <Button variant={\"contained\"} onClick={restartGame}>\r\n                        Restart\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            <GameDialog text={\"You lost\"} action={restartGame} open={round > maxRounds}/>\r\n\r\n            <GameDialog text={\"Congratulations! You won!\"} action={restartGame} open={victory}/>\r\n        </Box>\r\n    );\r\n}\r\n\r\n","import React, {useState} from \"react\";\r\nimport {Box, Typography, IconButton, DialogTitle, DialogActions, DialogContent} from \"@material-ui/core\";\r\nimport {title, gameDescription} from \"../config\";\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nexport default function Topbar() {\r\n    const [rulesDialogOpen, setRulesDialogOpen] = useState(false);\r\n\r\n    return (\r\n        <Box textAlign=\"center\">\r\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n                <Typography variant={\"h5\"}>{title}</Typography>\r\n\r\n                <Box ml={2}>\r\n                    <IconButton onClick={() => setRulesDialogOpen(true)}>\r\n                        <InfoIcon />\r\n                    </IconButton>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Dialog\r\n                open={rulesDialogOpen}\r\n                maxWidth={'md'}\r\n                onClose={() => setRulesDialogOpen(false)}\r\n            >\r\n                <DialogTitle>How to play</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    {gameDescription}\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <Button onClick={() => setRulesDialogOpen(false)}>\r\n                        Got it\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Box>\r\n    );\r\n}","import './App.css';\nimport React from 'react';\nimport {Box, Tab, Tabs} from \"@material-ui/core\";\nimport {standardGame} from \"./config\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport Setup from \"./game/Setup\";\nimport Topbar from \"./game/Topbar\";\nimport Game from \"./game/Game\";\n\nfunction App() {\n    const [page, setPage] = React.useState(0);\n\n    return (\n        <main>\n            <CssBaseline/>\n\n            <Box px={2} py={2}>\n                <Box mb={2}>\n                    <Topbar/>\n                </Box>\n\n                <TabNavigation setPage={setPage}/>\n\n                {page === 0 ?\n                    <Box display=\"flex\" justifyContent=\"center\" py={3}>\n                        <Game size={standardGame.size} maxRounds={standardGame.rounds}/>\n                    </Box>\n                    :\n                    <Box display=\"flex\" justifyContent=\"center\" py={3}>\n                        <Game size={4} maxRounds={standardGame.rounds}/>\n                    </Box>\n                }\n            </Box>\n        </main>\n    );\n}\n\nfunction TabNavigation({setPage}) {\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n        setPage(newValue);\n    };\n\n    function a11yProps(index) {\n        return {\n            id: `full-width-tab-${index}`,\n            'aria-controls': `full-width-tabpanel-${index}`,\n        };\n    }\n\n    return (\n        <Box>\n            <Tabs\n                value={value}\n                onChange={handleChange}\n                variant=\"fullWidth\"\n                textColor=\"primary\"\n                indicatorColor=\"primary\"\n            >\n                <Tab label=\"Standard Game\" {...a11yProps(0)} />\n                <Tab label=\"CUstom Game\" {...a11yProps(1)} disabled/>\n            </Tabs>\n        </Box>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}