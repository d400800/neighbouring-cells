{"version":3,"sources":["config.js","game/Settings.jsx","game/Topbar.jsx","game/utils.js","game/Board.js","game/GameBoard.jsx","game/CellSelector.jsx","game/Dialog.jsx","game/Game.jsx","game/TabNavigation.jsx","App.js","reportWebVitals.js","index.js"],"names":["defaultColorMap","Map","shmlasha","kaki","colors","Array","from","keys","standardGame","colorMaps","useStyles","makeStyles","theme","Settings","settings","setSettings","setTab","classes","React","useState","size","boardSize","setBoardSize","rounds","setRounds","setTheme","Box","className","root","FormControl","component","fullWidth","FormLabel","RadioGroup","aria-label","name","value","onChange","e","parseInt","target","FormControlLabel","control","Radio","label","mt","map","TextField","id","variant","Button","onClick","tooltipIcon","top","left","position","transform","Topbar","rulesDialogOpen","setRulesDialogOpen","textAlign","display","justifyContent","alignItems","Typography","IconButton","fontSize","Dialog","open","maxWidth","onClose","DialogTitle","DialogContent","DialogActions","Utils","items","Math","floor","random","length","board","options","this","defaultCellColors","colorMap","cellColors","i","row","j","push","getRandomItem","color","originalBoard","slice","visitedCells","initialColor","cellsToRepaint","findCellsToRepaint","startCell","neighbours","getNeighbours","cell","cellToString","cellStringsToArr","col","cellStrings","str","split","filter","includes","initialCell","useCellStyles","width","margin","transition","breakpoints","up","props","cellWidth","content","paddingTop","GameBoard","boardData","onColorSelect","gameControlsHeight","window","innerHeight","role","style","backgroundColor","get","btn","border","cursor","height","down","CellSelector","onColorSelectRef","useRef","current","cells","useEffect","handleKeydown","code","indexOf","cellIndex","document","addEventListener","console","log","removeEventListener","title","GameDialog","text","action","disableBackdropClick","aria-labelledby","aria-describedby","mb","Game","generateRandomBoard","setBoardData","round","setRound","victory","setVictory","setGameControlsHeight","selectNextColor","newBoardData","repaint","isHomogeneous","restartGame","gameControlsId","$gameControls","getElementById","offsetHeight","controls","my","TabNavigation","tab","setValue","a11yProps","index","Tabs","event","newValue","textColor","indicatorColor","Tab","App","CssBaseline","px","py","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"uQAAaA,EAAkB,IAAIC,IAAI,CACnC,CAAC,OAAQ,WACT,CAAC,OAAQ,WACT,CAAC,SAAU,WACX,CAAC,MAAO,aAGCC,EAAW,IAAID,IAAI,CAC5B,CAAC,OAAQ,WACT,CAAC,OAAQ,WACT,CAAC,SAAU,WACX,CAAC,MAAO,aAGCE,EAAO,IAAIF,IAAI,CACxB,CAAC,QAAS,WACV,CAAC,MAAO,WACR,CAAC,SAAU,WACX,CAAC,QAAS,aAGDG,EAASC,MAAMC,KAAKN,EAAgBO,QAUpCC,EACD,GADCA,EAEH,GAFGA,EAGF,UAGEC,EAAY,IAAIR,IAAI,CAC7B,CAAC,UAAWD,GACZ,CAAC,OAAQG,GACT,CAAC,WAAYD,K,iFClCXQ,EAAYC,aAAW,SAAAC,GAAK,MAAK,MAIxB,SAASC,EAAT,GAAoD,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,YAAaC,EAAS,EAATA,OAC/CC,EAAUP,IAD8C,EAG5BQ,IAAMC,SAASL,EAASM,MAHI,mBAGvDC,EAHuD,KAG5CC,EAH4C,OAIlCJ,IAAMC,SAASL,EAASS,QAJU,mBAIvDA,EAJuD,KAI/CC,EAJ+C,OAKpCN,IAAMC,SAASL,EAASF,OALY,mBAKvDA,EALuD,KAKhDa,EALgD,KAkB9D,OACI,cAACC,EAAA,EAAD,CAAKC,UAAWV,EAAQW,KAAxB,SACI,iCACI,eAACC,EAAA,EAAD,CAAaC,UAAU,WAAWC,WAAS,EAA3C,UACI,cAACC,EAAA,EAAD,CAAWF,UAAU,SAArB,wBAEA,eAACG,EAAA,EAAD,CAAYC,aAAW,aAAaC,KAAK,aAAaC,MAAOf,EACjDgB,SAAU,SAAAC,GAAC,OAAIhB,EAAaiB,SAASD,EAAEE,OAAOJ,SAD1D,UAGI,cAACK,EAAA,EAAD,CAAkBL,MAAO,GAAIM,QAAS,cAACC,EAAA,EAAD,IAAWC,MAAM,OACvD,cAACH,EAAA,EAAD,CAAkBL,MAAO,GAAIM,QAAS,cAACC,EAAA,EAAD,IAAWC,MAAM,OACvD,cAACH,EAAA,EAAD,CAAkBL,MAAO,GAAIM,QAAS,cAACC,EAAA,EAAD,IAAWC,MAAM,aAI/D,cAAClB,EAAA,EAAD,CAAKmB,GAAI,EAAT,SACI,eAAChB,EAAA,EAAD,CAAaC,UAAU,WAAWC,WAAS,EAA3C,UACI,cAACC,EAAA,EAAD,CAAWF,UAAU,SAArB,mBAEA,cAACG,EAAA,EAAD,CAAYC,aAAW,aAAaC,KAAK,aAAaC,MAAOxB,EACjDyB,SAAU,SAAAC,GAAC,OAAIb,EAASa,EAAEE,OAAOJ,QAD7C,SAGK/B,MAAMC,KAAKG,EAAUF,QAAQuC,KAAI,SAAClC,GAAD,OAC/B,cAAC6B,EAAA,EAAD,CAA8BL,MAAOxB,EAAO8B,QAAS,cAACC,EAAA,EAAD,IAAWC,MAAOhC,GAAhDA,aAMtC,cAACc,EAAA,EAAD,CAAKmB,GAAI,EAAT,SACI,cAAChB,EAAA,EAAD,CAAaE,WAAS,EAAtB,SACI,cAACgB,EAAA,EAAD,CACIC,GAAG,SACHJ,MAAM,mBACNxB,KAAM,QACNgB,MAAOb,GAAU,GACjB0B,QAAQ,WACRZ,SAAU,SAAAC,GAAC,OAAId,EAAUe,SAASD,EAAEE,OAAOJ,eAKvD,cAACV,EAAA,EAAD,CAAKmB,GAAI,EAAT,SACI,cAACK,EAAA,EAAD,CAAQD,QAAS,YAAaE,QAtD9C,WAOIpC,EANoB,CAChBK,KAAMC,EACNE,SACAX,UAIJI,EAAO,IA8CK,iC,0EC/DdN,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCwC,YAAa,CACTC,IAAK,MACLC,KAAM,OACNC,SAAU,WACVC,UAAW,wBAIJ,SAASC,IACpB,IAAMxC,EAAUP,IADa,EAGiBS,oBAAS,GAH1B,mBAGtBuC,EAHsB,KAGLC,EAHK,KAK7B,OACI,eAACjC,EAAA,EAAD,CAAKkC,UAAU,SAAf,UACI,cAAClC,EAAA,EAAD,CAAKmC,QAAQ,OAAOC,eAAe,SAASC,WAAW,SAAvD,SACI,eAACrC,EAAA,EAAD,CAAK6B,SAAS,WAAd,UACI,cAACS,EAAA,EAAD,CAAYf,QAAS,KAArB,SFGC,uBEDD,cAACvB,EAAA,EAAD,CAAKC,UAAWV,EAAQmC,YAAxB,SACI,cAACa,EAAA,EAAD,CAAYd,QAAS,kBAAMQ,GAAmB,IAA9C,SACI,cAAC,IAAD,CAAUO,SAAU,mBAMpC,eAACC,EAAA,EAAD,CACIC,KAAMV,EACNW,SAAU,KACVC,QAAS,kBAAMX,GAAmB,IAHtC,UAKI,cAACY,EAAA,EAAD,0BAEA,cAACC,EAAA,EAAD,UFpBY,qVEwBZ,cAACC,EAAA,EAAD,UACI,cAACvB,EAAA,EAAD,CAAQC,QAAS,kBAAMQ,GAAmB,IAA1C,4B,oCChDCe,E,2GACIC,GACjB,OAAOA,EAAMC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,a,KC+FvCC,EAFD,I,WA3FV,WAAYC,GAAU,oBAClBC,KAAKC,kBAAoBF,EAAQ7E,O,gEAGjBgB,EAAMgE,GAKtB,IAJA,IAAMC,EAAahF,MAAMC,KAAK8E,EAAS7E,QAEnCyE,EAAQ,GAEHM,EAAI,EAAGA,EAAIlE,IAAQkE,EAAG,CAG3B,IAFA,IAAIC,EAAM,GAEDC,EAAI,EAAGA,EAAIpE,IAAQoE,EACxBD,EAAIE,KAAKf,EAAMgB,cAAcL,GAAcH,KAAKC,oBAGpDH,EAAMS,KAAKF,GAGf,OAAOP,I,8BAIHW,EAAOC,GAAgB,IAAD,SACpBZ,EAAQY,EAAcC,QAEtBC,EAAe,CAAC,OAEhBC,EAAef,EAAM,GAAG,GAkBxBgB,EAdqB,SAArBC,EAAsBC,GACxB,IAAIC,EAAa,EAAKC,cAAcpB,EAAMD,OAAO,EAAGC,EAAOe,EAAcG,EAAWJ,GAEpF,GAAIK,EAAWpB,OAAS,EAAG,CAAC,IAAD,gBACJoB,GADI,IACvB,2BAA+B,CAAC,IAArBE,EAAoB,QAC3BP,EAAaL,KAAK,EAAKa,aAAaD,IAEpCJ,EAAmBI,IAJA,+BAQ3B,OAAO,EAAKE,iBAAiBT,GAGVG,CAhBL,CAAC,EAAE,IAPK,cAyBDD,GAzBC,IAyB1B,2BAAyC,CAAC,IAAD,yBAA7BT,EAA6B,KAAxBiB,EAAwB,KACrCxB,EAAMO,GAAKiB,GAAOb,GA1BI,8BA6B1B,OAAOX,I,sCAGe,IAAD,mBAAXO,EAAW,KAANiB,EAAM,KACrB,MAAM,GAAN,OAAUjB,EAAV,YAAiBiB,K,uCAGJC,GACb,OAAOA,EACF3D,KAAI,SAAA4D,GAAQ,IAAD,EACWA,EAAIC,MAAM,KADrB,mBACDpB,EADC,KACIiB,EADJ,KAGR,MAAO,CAACjE,SAASgD,GAAMhD,SAASiE,S,oCAI9BpF,EAAM4D,EAAOW,E,EAAmBG,GAAe,IAAD,0BAAzBP,EAAyB,KAApBiB,EAAoB,KAMxD,MAAO,CALOjB,EAAMnE,EAAO,CAACmE,EAAI,EAAGiB,GAAO,GACrB,IAARjB,EAAY,CAACA,EAAI,EAAGiB,GAAO,GACpB,IAARA,EAAY,CAACjB,EAAKiB,EAAI,GAAK,GACxBA,EAAMpF,EAAO,CAACmE,EAAKiB,EAAI,GAAK,IAGtCI,QAAO,SAAAP,GACJ,OAAOA,EAAKtB,OAAS,GACjBC,EAAMqB,EAAK,IAAIA,EAAK,MAAQV,IAC3BG,EAAae,SAAS,EAAKP,aAAaD,S,oCAI3CrB,GACV,IAAM8B,EAAc9B,EAAM,GAAG,GAE7B,OAEgB,IAFTA,EACF4B,QAAO,SAAArB,GAAG,OAAIA,EAAIqB,QAAO,SAAAP,GAAI,QAAMA,IAASS,MAAc/B,OAAS,KACnEA,W,KAIC,CAAU,CAAC3E,WCxFZ2G,EAAgBpG,aAAW,SAAAC,GAAK,YAAK,CAC9CyF,MAAI,GACAW,MAAO,OACPC,OAAQ,EACRC,WAAY,yBAHZ,cAKCtG,EAAMuG,YAAYC,GAAG,MAAQ,CAC1BJ,MAAO,SAAAK,GAAK,OAAIA,EAAMC,aAN1B,cASA,UAAW,CACPC,QAAS,KACT1D,QAAS,QACT2D,WAAY,SAZhB,OAiBO,SAASC,EAAT,GAAoG,IAAhFC,EAA+E,EAA/EA,UAAWC,EAAoE,EAApEA,cAAevG,EAAqD,EAArDA,KAAMwG,EAA+C,EAA/CA,mBAA+C,IAA3BxC,gBAA2B,MAAlBpF,EAAkB,EACxGsH,GAAaO,OAAOC,aAAeF,GAAsB,GAAK,KAAOxG,EAErEH,EAAU8F,EAAc,CAAC3F,OAAMkG,cAErC,OACI,mCACKI,EAAU5E,KAAI,SAACyC,EAAKD,GAAN,OACX,cAAC5D,EAAA,EAAD,CAAamC,QAAS,OAAtB,SACK0B,EAAIzC,KAAI,SAACuD,EAAMb,GAAP,OACL,qBACKuC,KAAM,SACN5E,QAAS,kBAAMwE,EAActB,IAC7B1E,UAAS,UAAKV,EAAQoF,MACtB2B,MAAO,CAACC,gBAAiB7C,EAAS8C,IAAI7B,KAJ3C,UAAaf,EAAb,YAAkBE,QAFhBF,QC5B1B,IAAM5E,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCuH,IAAK,CACDC,OAAQ,OACRC,OAAQ,UACRrB,MAAO,GACPsB,OAAQ,IAEZ1G,KAAK,aACDiC,QAAS,OACTC,eAAgB,UACflD,EAAMuG,YAAYoB,KAAK,MAAQ,CAC5BzE,eAAgB,qBAKb,SAAS0E,EAAT,GAAkE,IAA3Cb,EAA0C,EAA1CA,cAA0C,IAA3BvC,gBAA2B,MAAlBpF,EAAkB,EACtEyI,EAAmBC,iBAAOf,GAAegB,QACzC1H,EAAUP,IAEVkI,EAAQvI,MAAMC,KAAK8E,EAAS7E,QA0BlC,OAxBAsI,qBAAU,WACN,SAASC,EAAcxG,GACnB,KAAIA,EAAEyG,KAAKC,QAAQ,SAAW,GAA9B,CAIA,IAAMC,EAAY1G,SAASD,EAAEyG,KAAKpC,MAAM,SAAS,IAE7CsC,EAAY,GAIhBR,EAAiBG,EAAMK,EAAU,KAKrC,OAFAC,SAASC,iBAAiB,UAAWL,GAE9B,WACHM,QAAQC,IAAI,kBAEZH,SAASI,oBAAoB,UAAWR,MAE7C,CAACF,EAAOH,IAGP,cAAC/G,EAAA,EAAD,CAAKC,UAAWV,EAAQW,KAAxB,SACKgH,EAAM9F,KAAI,SAAAuD,GAAI,OACX,wBAAQkD,MAAOlD,EACPlD,QAAS,kBAAMwE,EAActB,IAC7B2B,MAAO,CAACC,gBAAiB7C,EAAS8C,IAAI7B,IACtC1E,UAAWV,EAAQkH,KAHD9B,QChD1C,IAAM3F,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCgB,KAAM,CACFgC,UAAW,SAEX,+BAAgC,CAC5BoD,MAAO,YAKJ,SAASwC,EAAT,GAAkD,IAA7BC,EAA4B,EAA5BA,KAAMF,EAAsB,EAAtBA,MAAOnF,EAAe,EAAfA,KAAMsF,EAAS,EAATA,OAC7CzI,EAAUP,IAEhB,OACI,eAACyD,EAAA,EAAD,CACIC,KAAMA,EACNC,UAAU,EACVC,QAASoF,EACTC,sBAAoB,EACpBhI,UAAWV,EAAQW,KACnBgI,kBAAgB,qBAChBC,mBAAiB,2BAPrB,UASI,cAACtF,EAAA,EAAD,UAAcgF,IAEd,cAAC/E,EAAA,EAAD,UACI,cAACR,EAAA,EAAD,UAAayF,MAGjB,cAAChF,EAAA,EAAD,UACI,cAAC/C,EAAA,EAAD,CAAKkC,UAAW,SAAUoD,MAAO,OAAQ8C,GAAI,IAA7C,SACI,cAAC5G,EAAA,EAAD,CAAQC,QAASuG,EAAQzG,QAAS,YAAlC,4BC3BpB,IAAMvC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCoE,MAAM,eACDpE,EAAMuG,YAAYC,GAAG,MAAQ,CAC1BvD,QAAS,qBAKN,SAASkG,EAAT,GAAyC,IAA1B3I,EAAyB,EAAzBA,KAAMG,EAAmB,EAAnBA,OAAQ6D,EAAW,EAAXA,SAClCnE,EAAUP,IADmC,EAGjBS,mBAAS6D,EAAMgF,oBAAoB5I,EAAMgE,IAHxB,mBAG5CsC,EAH4C,KAGjCuC,EAHiC,OAIzB9I,mBAAS,GAJgB,mBAI5C+I,EAJ4C,KAIrCC,EAJqC,OAKrBhJ,oBAAS,GALY,mBAK5CiJ,EAL4C,KAKnCC,EALmC,OAMClJ,qBAND,mBAM5CyG,EAN4C,KAMxB0C,EANwB,KAQnD,SAASC,EAAgB5E,GACrB,IAAM6E,EAAexF,EAAMyF,QAAQ9E,EAAO+B,GAEtC1C,EAAM0F,cAAcF,IAexBH,GAAW,GAXXJ,EAAaO,GACbL,EAASD,EAAQ,GAGrB,SAASS,IACLR,EAAS,GACTE,GAAW,GACXJ,EAAajF,EAAMgF,oBAAoB5I,EAAMgE,IAOjD,IAAMwF,EAAiB,gBAUvB,OARA/B,qBAAU,WACN,IAAMgC,EAAgB3B,SAAS4B,eAAeF,GAE9CX,EAAajF,EAAMgF,oBAAoB5I,EAAMgE,IAE7CkF,EAAsBO,GAAiBA,EAAcE,gBACtD,CAAC3J,IAGA,eAACM,EAAA,EAAD,CAAKsF,MAAM,OAAOpD,UAAU,SAA5B,UACI,cAAClC,EAAA,EAAD,CAAKC,UAAWV,EAAQ+D,MAAxB,SACI,cAACyC,EAAD,CACIrG,KAAMA,EACNsG,UAAWA,EACXtC,SAAUA,EACVwC,mBAAoBA,EACpBD,cAAe4C,MAIvB,eAAC7I,EAAA,EAAD,CAAKsB,GAAI4H,EAAgB/H,GAAI,EAAGlB,UAAWV,EAAQ+J,SAAnD,UACI,cAACtJ,EAAA,EAAD,CAAKkC,UAAU,SAAf,SACI,eAACI,EAAA,EAAD,CAAYf,QAAS,QAArB,mBAAqCiH,EAArC,IAA6C3I,OAGjD,cAACG,EAAA,EAAD,CAAKuJ,GAAI,EAAT,SACI,cAACzC,EAAD,CAAcb,cAAe4C,EAAiBnF,SAAUA,MAG5D,cAAC1D,EAAA,EAAD,CAAKmB,GAAI,EAAGe,UAAU,SAAtB,SACI,cAACV,EAAA,EAAD,CAAQD,QAAS,YAAaE,QAASwH,EAAvC,0BAMR,cAACnB,EAAD,CACID,MAAO,oBACPE,KAAM,kBACNC,OAAQiB,EACRvG,KAAM8F,EAAQ3I,IAGlB,cAACiI,EAAD,CACID,MAAO,mBACPE,KAAM,oBACNC,OAAQiB,EACRvG,KAAMgG,O,gCC7Ff,SAASc,GAAT,GAAuC,IAAflK,EAAc,EAAdA,OAAQmK,EAAM,EAANA,IAAM,EACfjK,IAAMC,SAASgK,GADA,mBAClC/I,EADkC,KAC3BgJ,EAD2B,KAQzC,SAASC,EAAUC,GACf,MAAO,CACHtI,GAAG,kBAAD,OAAoBsI,GACtB,gBAAgB,uBAAhB,OAAwCA,IAQhD,OAJApK,IAAM2H,WAAU,WACZuC,EAASD,KACV,CAACA,IAGA,cAACzJ,EAAA,EAAD,UACI,eAAC6J,GAAA,EAAD,CACInJ,MAAOA,EACPC,SApBS,SAACmJ,EAAOC,GACzBL,EAASK,GACTzK,EAAOyK,IAmBCxI,QAAQ,YACRyI,UAAU,UACVC,eAAe,UALnB,UAOI,cAACC,GAAA,EAAD,aAAKhJ,MAAM,QAAWyI,EAAU,KAChC,cAACO,GAAA,EAAD,aAAKhJ,MAAM,YAAeyI,EAAU,UCqBrCQ,OA1Cf,WAAgB,IAAD,EACW3K,IAAMC,SAAS,GAD1B,mBACJgK,EADI,KACCnK,EADD,OAGqBE,IAAMC,SAAS,CAC3CC,KAAMZ,EACNI,MAAOJ,EACPe,OAAQf,IAND,mBAGJM,EAHI,KAGMC,EAHN,KASX,OACI,iCACI,cAAC+K,EAAA,EAAD,IAEA,eAACpK,EAAA,EAAD,CAAKqK,GAAI,EAAGC,GAAI,EAAhB,UACI,cAACtK,EAAA,EAAD,CAAKoI,GAAI,EAAT,SACI,cAACrG,EAAD,MAGJ,cAACyH,GAAD,CAAelK,OAAQA,EAAQmK,IAAKA,IAE3B,IAARA,EACG,cAACzJ,EAAA,EAAD,CAAKmC,QAAQ,OAAOC,eAAe,SAASkI,GAAI,EAAhD,SACI,cAACjC,EAAD,CACI3I,KAAMN,EAASM,KACfG,OAAQT,EAASS,OACjB6D,SAAU3E,EAAUyH,IAAIpH,EAASF,WAIzC,cAACc,EAAA,EAAD,CAAKsK,GAAI,EAAT,SACI,cAACnL,EAAD,CACIC,SAAUA,EACVC,YAAaA,EACbC,OAAQA,aChCrBiL,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEF1D,SAAS4B,eAAe,SAM1BmB,O","file":"static/js/main.fc684591.chunk.js","sourcesContent":["export const defaultColorMap = new Map([\r\n    [\"teal\", \"#19FA8C\"],\r\n    [\"blue\", \"#4C32FA\"],\r\n    [\"yellow\", \"#FADA0C\"],\r\n    [\"red\", \"#FA1E00\"],\r\n]);\r\n\r\nexport const shmlasha = new Map([\r\n    [\"teal\", \"#FFA966\"],\r\n    [\"blue\", \"#CE4DFF\"],\r\n    [\"yellow\", \"#C3FF38\"],\r\n    [\"red\", \"#40E8FF\"],\r\n]);\r\n\r\nexport const kaki = new Map([\r\n    [\"black\", \"#80682E\"],\r\n    [\"poo\", \"#FFE6A8\"],\r\n    [\"purple\", \"#B0CC49\"],\r\n    [\"brown\", \"#CCA749\"],\r\n]);\r\n\r\nexport const colors = Array.from(defaultColorMap.keys());\r\n\r\nexport const gameDescription = `\r\n    The goal is to paint all board cells the same color.\r\n    At the beginning of each round, the color of the top left (initial) cell is selected.\r\n    The newly selected color will spread to other cells which have the same color as the initial one and are adjacent to each other (have a common top, right, bottom or left border). \r\n`;\r\n\r\nexport const title = 'Neighbouring Cells';\r\n\r\nexport const standardGame = {\r\n    rounds: 21,\r\n    size: 18,\r\n    theme: 'Default'\r\n}\r\n\r\nexport const colorMaps = new Map([\r\n    ['Default', defaultColorMap],\r\n    ['Kaki', kaki],\r\n    ['Shmlasha', shmlasha]\r\n]);","import React from 'react';\r\nimport {TextField, Box, Radio, FormControl, FormLabel, RadioGroup, FormControlLabel, Button} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nimport {colorMaps} from \"../config\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\r\n}));\r\n\r\nexport default function Settings({settings, setSettings, setTab}) {\r\n    const classes = useStyles();\r\n\r\n    const [boardSize, setBoardSize] = React.useState(settings.size);\r\n    const [rounds, setRounds] = React.useState(settings.rounds);\r\n    const [theme, setTheme] = React.useState(settings.theme);\r\n\r\n    function onSetSettings() {\r\n        const newSettings = {\r\n            size: boardSize,\r\n            rounds,\r\n            theme\r\n        };\r\n\r\n        setSettings(newSettings);\r\n        setTab(0);\r\n    }\r\n\r\n    return (\r\n        <Box className={classes.root}>\r\n            <form>\r\n                <FormControl component=\"fieldset\" fullWidth>\r\n                    <FormLabel component=\"legend\">Board size</FormLabel>\r\n\r\n                    <RadioGroup aria-label=\"board-size\" name=\"board-size\" value={boardSize}\r\n                                onChange={e => setBoardSize(parseInt(e.target.value))}\r\n                    >\r\n                        <FormControlLabel value={18} control={<Radio />} label=\"18\" />\r\n                        <FormControlLabel value={24} control={<Radio />} label=\"24\" />\r\n                        <FormControlLabel value={32} control={<Radio />} label=\"32\" />\r\n                    </RadioGroup>\r\n                </FormControl>\r\n\r\n                <Box mt={4}>\r\n                    <FormControl component=\"fieldset\" fullWidth>\r\n                        <FormLabel component=\"legend\">Theme</FormLabel>\r\n\r\n                        <RadioGroup aria-label=\"board-size\" name=\"board-size\" value={theme}\r\n                                    onChange={e => setTheme(e.target.value)}\r\n                        >\r\n                            {Array.from(colorMaps.keys()).map((theme) => (\r\n                               <FormControlLabel key={theme} value={theme} control={<Radio />} label={theme} />\r\n                            ))}\r\n                        </RadioGroup>\r\n                    </FormControl>\r\n                </Box>\r\n\r\n                <Box mt={4}>\r\n                    <FormControl fullWidth>\r\n                        <TextField\r\n                            id=\"rounds\"\r\n                            label=\"Number of rounds\"\r\n                            size={\"small\"}\r\n                            value={rounds || ''}\r\n                            variant=\"outlined\"\r\n                            onChange={e => setRounds(parseInt(e.target.value))}\r\n                        />\r\n                    </FormControl>\r\n                </Box>\r\n\r\n                <Box mt={4}>\r\n                    <Button variant={\"contained\"} onClick={onSetSettings}>\r\n                        Save & Start\r\n                    </Button>\r\n                </Box>\r\n            </form>\r\n        </Box>\r\n    );\r\n}","import React, {useState} from \"react\";\r\nimport {Box, Typography, IconButton, DialogTitle, DialogActions, DialogContent} from \"@material-ui/core\";\r\nimport {title, gameDescription} from \"../config\";\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    tooltipIcon: {\r\n        top: '50%',\r\n        left: '100%',\r\n        position: 'absolute',\r\n        transform: 'translateY(-50%)'\r\n    }\r\n}));\r\n\r\nexport default function Topbar() {\r\n    const classes = useStyles();\r\n\r\n    const [rulesDialogOpen, setRulesDialogOpen] = useState(false);\r\n\r\n    return (\r\n        <Box textAlign=\"center\">\r\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n                <Box position=\"relative\">\r\n                    <Typography variant={\"h5\"}>{title}</Typography>\r\n\r\n                    <Box className={classes.tooltipIcon}>\r\n                        <IconButton onClick={() => setRulesDialogOpen(true)}>\r\n                            <InfoIcon fontSize={\"small\"} />\r\n                        </IconButton>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Dialog\r\n                open={rulesDialogOpen}\r\n                maxWidth={'md'}\r\n                onClose={() => setRulesDialogOpen(false)}\r\n            >\r\n                <DialogTitle>How to play</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    {gameDescription}\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <Button onClick={() => setRulesDialogOpen(false)}>\r\n                        Got it\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Box>\r\n    );\r\n}","export default class Utils {\r\n    static getRandomItem(items) {\r\n        return items[Math.floor(Math.random() * items.length)];\r\n    }\r\n}","import Utils from './utils';\r\nimport {colors} from '../config.js';\r\n\r\nclass Board {\r\n    constructor(options) {\r\n        this.defaultCellColors = options.colors;\r\n    }\r\n\r\n    generateRandomBoard(size, colorMap) {\r\n        const cellColors = Array.from(colorMap.keys());\r\n\r\n        let board = [];\r\n\r\n        for (let i = 0; i < size; ++i) {\r\n            let row = [];\r\n\r\n            for (let j = 0; j < size; ++j) {\r\n                row.push(Utils.getRandomItem(cellColors || this.defaultCellColors));\r\n            }\r\n\r\n            board.push(row);\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    // bootleg bucket fill algorithm, don't judge\r\n    repaint(color, originalBoard) {\r\n        const board = originalBoard.slice();\r\n\r\n        const visitedCells = ['0|0'];\r\n\r\n        const initialColor = board[0][0];\r\n\r\n        let currentCell = [0,0];\r\n\r\n        const findCellsToRepaint = (startCell) => {\r\n            let neighbours = this.getNeighbours(board.length-1, board, initialColor, startCell, visitedCells);\r\n\r\n            if (neighbours.length > 0) {\r\n                for (const cell of neighbours) {\r\n                    visitedCells.push(this.cellToString(cell));\r\n\r\n                    findCellsToRepaint(cell);\r\n                }\r\n            }\r\n\r\n            return this.cellStringsToArr(visitedCells);\r\n        }\r\n\r\n        const cellsToRepaint = findCellsToRepaint(currentCell);\r\n\r\n        for (const [row, col] of cellsToRepaint) {\r\n            board[row][col] = color;\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    cellToString([row, col]) {\r\n        return `${row}|${col}`;\r\n    }\r\n\r\n    cellStringsToArr(cellStrings) {\r\n        return cellStrings\r\n            .map(str => {\r\n                const [row, col] = str.split('|');\r\n\r\n                return [parseInt(row), parseInt(col)];\r\n            });\r\n    }\r\n\r\n    getNeighbours(size, board, color, [row, col], visitedCells) {\r\n        const right = row < size ? [row+1, col] : [];\r\n        const left = row !== 0 ? [row-1, col] : [];\r\n        const top = col !== 0 ? [row, col-1] : [];\r\n        const bottom = col < size ? [row, col+1] : [];\r\n\r\n        return [right, left, top, bottom]\r\n            .filter(cell => {\r\n                return cell.length > 0 &&\r\n                    board[cell[0]][cell[1]] === color &&\r\n                    !visitedCells.includes(this.cellToString(cell))\r\n            });\r\n    }\r\n\r\n    isHomogeneous(board) {\r\n        const initialCell = board[0][0];\r\n\r\n        return board\r\n            .filter(row => row.filter(cell => !(cell === initialCell)).length > 0)\r\n            .length === 0\r\n    }\r\n}\r\n\r\nconst board = new Board({colors});\r\n\r\nexport default board;","import React from \"react\";\r\n\r\nimport {Box} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nimport {defaultColorMap} from '../config.js';\r\n\r\nexport const useCellStyles = makeStyles(theme => ({\r\n    cell: {\r\n        width: '100%',\r\n        margin: 1,\r\n        transition: 'background-color .25s',\r\n\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: props => props.cellWidth,\r\n        },\r\n\r\n        '&:after': {\r\n            content: \"''\",\r\n            display: 'block',\r\n            paddingTop: '100%'\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function GameBoard({boardData, onColorSelect, size, gameControlsHeight, colorMap=defaultColorMap}) {\r\n    const cellWidth = (window.innerHeight - (gameControlsHeight || 0) - 240) / size;\r\n\r\n    const classes = useCellStyles({size, cellWidth});\r\n\r\n    return (\r\n        <>\r\n            {boardData.map((row, i) => (\r\n                <Box key={i} display={'flex'}>\r\n                    {row.map((cell, j) => (\r\n                        <div key={`${i}-${j}`}\r\n                             role={\"button\"}\r\n                             onClick={() => onColorSelect(cell)}\r\n                             className={`${classes.cell}`}\r\n                             style={{backgroundColor: colorMap.get(cell)}}\r\n                        />\r\n                    ))}\r\n                </Box>\r\n            ))}\r\n        </>\r\n    );\r\n}","import React, {useEffect, useRef} from 'react';\r\nimport {Box} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {defaultColorMap} from '../config.js';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    btn: {\r\n        border: 'none',\r\n        cursor: 'pointer',\r\n        width: 24,\r\n        height: 24\r\n    },\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        [theme.breakpoints.down('xs')]: {\r\n            justifyContent: 'space-around'\r\n        },\r\n    }\r\n}));\r\n\r\nexport default function CellSelector({onColorSelect, colorMap=defaultColorMap}) {\r\n    const onColorSelectRef = useRef(onColorSelect).current;\r\n    const classes = useStyles();\r\n\r\n    const cells = Array.from(colorMap.keys());\r\n\r\n    useEffect(() => {\r\n        function handleKeydown(e) {\r\n            if (e.code.indexOf('Digit') < 0) {\r\n                return;\r\n            }\r\n\r\n            const cellIndex = parseInt(e.code.split('Digit')[1]);\r\n\r\n            if (cellIndex > 4) {\r\n                return;\r\n            }\r\n\r\n            onColorSelectRef(cells[cellIndex-1]);\r\n        }\r\n\r\n        document.addEventListener('keydown', handleKeydown);\r\n\r\n        return () => { // second, we return an anonymous clean up function\r\n            console.log('I clean now...');\r\n\r\n            document.removeEventListener('keydown', handleKeydown);\r\n        };\r\n    }, [cells, onColorSelectRef])\r\n\r\n    return (\r\n        <Box className={classes.root}>\r\n            {cells.map(cell => (\r\n                <button title={cell} key={cell}\r\n                        onClick={() => onColorSelect(cell)}\r\n                        style={{backgroundColor: colorMap.get(cell)}}\r\n                        className={classes.btn}\r\n                />\r\n            ))}\r\n        </Box>\r\n    );\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport {Box, Typography, Dialog, DialogActions, DialogTitle, DialogContent} from '@material-ui/core';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        textAlign: 'center',\r\n\r\n        '& .MuiDialog-paperWidthFalse': {\r\n            width: \"80%\"\r\n        }\r\n    },\r\n}));\r\n\r\nexport default function GameDialog({text, title, open, action}) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            maxWidth={false}\r\n            onClose={action}\r\n            disableBackdropClick\r\n            className={classes.root}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle>{title}</DialogTitle>\r\n\r\n            <DialogContent>\r\n                <Typography>{text}</Typography>\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Box textAlign={\"center\"} width={\"100%\"} mb={1.5}>\r\n                    <Button onClick={action} variant={\"contained\"}>\r\n                        Restart\r\n                    </Button>\r\n                </Box>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {Box, Typography, Button} from \"@material-ui/core\";\r\n\r\nimport board from \"./Board\";\r\n\r\nimport GameBoard from \"./GameBoard\";\r\nimport CellSelector from \"./CellSelector\";\r\nimport GameDialog from \"./Dialog\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    board: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'inline-block'\r\n        },\r\n    }\r\n}));\r\n\r\nexport default function Game({size, rounds, colorMap}) {\r\n    const classes = useStyles();\r\n\r\n    const [boardData, setBoardData] = useState(board.generateRandomBoard(size, colorMap));\r\n    const [round, setRound] = useState(1);\r\n    const [victory, setVictory] = useState(false);\r\n    const [gameControlsHeight, setGameControlsHeight] = useState();\r\n\r\n    function selectNextColor(color) {\r\n        const newBoardData = board.repaint(color, boardData);\r\n\r\n        if (board.isHomogeneous(newBoardData)) {\r\n            winGame();\r\n        }\r\n\r\n        setBoardData(newBoardData);\r\n        setRound(round + 1);\r\n    }\r\n\r\n    function restartGame() {\r\n        setRound(1);\r\n        setVictory(false);\r\n        setBoardData(board.generateRandomBoard(size, colorMap));\r\n    }\r\n\r\n    function winGame() {\r\n        setVictory(true);\r\n    }\r\n\r\n    const gameControlsId = 'game-controls';\r\n\r\n    useEffect(() => {\r\n        const $gameControls = document.getElementById(gameControlsId);\r\n\r\n        setBoardData(board.generateRandomBoard(size, colorMap));\r\n\r\n        setGameControlsHeight($gameControls && $gameControls.offsetHeight);\r\n    }, [size]);\r\n\r\n    return (\r\n        <Box width=\"100%\" textAlign=\"center\">\r\n            <Box className={classes.board}>\r\n                <GameBoard\r\n                    size={size}\r\n                    boardData={boardData}\r\n                    colorMap={colorMap}\r\n                    gameControlsHeight={gameControlsHeight}\r\n                    onColorSelect={selectNextColor}\r\n                />\r\n            </Box>\r\n\r\n            <Box id={gameControlsId} mt={2} className={classes.controls}>\r\n                <Box textAlign=\"center\">\r\n                    <Typography variant={\"body1\"}>Round {round}/{rounds}</Typography>\r\n                </Box>\r\n\r\n                <Box my={4}>\r\n                    <CellSelector onColorSelect={selectNextColor} colorMap={colorMap}/>\r\n                </Box>\r\n\r\n                <Box mt={3} textAlign=\"center\">\r\n                    <Button variant={\"contained\"} onClick={restartGame}>\r\n                        Restart\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            <GameDialog\r\n                title={\"The game beat you\"}\r\n                text={'Want a revenge?'}\r\n                action={restartGame}\r\n                open={round > rounds}\r\n            />\r\n\r\n            <GameDialog\r\n                title={\"Congratulations!\"}\r\n                text={'You beat the game'}\r\n                action={restartGame}\r\n                open={victory}\r\n            />\r\n        </Box>\r\n    );\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Box, Tab, Tabs} from \"@material-ui/core\";\r\n\r\nexport function TabNavigation({setTab, tab}) {\r\n    const [value, setValue] = React.useState(tab);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n        setTab(newValue);\r\n    };\r\n\r\n    function a11yProps(index) {\r\n        return {\r\n            id: `full-width-tab-${index}`,\r\n            'aria-controls': `full-width-tabpanel-${index}`,\r\n        };\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        setValue(tab)\r\n    }, [tab]);\r\n\r\n    return (\r\n        <Box>\r\n            <Tabs\r\n                value={value}\r\n                onChange={handleChange}\r\n                variant=\"fullWidth\"\r\n                textColor=\"primary\"\r\n                indicatorColor=\"primary\"\r\n            >\r\n                <Tab label=\"Game\" {...a11yProps(0)} />\r\n                <Tab label=\"Settings\" {...a11yProps(1)}/>\r\n            </Tabs>\r\n        </Box>\r\n    );\r\n}","import './App.css';\nimport React from 'react';\nimport {Box} from \"@material-ui/core\";\nimport {standardGame, colorMaps} from \"./config\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport Settings from \"./game/Settings\";\nimport Topbar from \"./game/Topbar\";\nimport Game from \"./game/Game\";\nimport {TabNavigation} from \"./game/TabNavigation\";\n\nfunction App() {\n    const [tab, setTab] = React.useState(0);\n\n    const [settings, setSettings] = React.useState({\n        size: standardGame.size,\n        theme: standardGame.theme,\n        rounds: standardGame.rounds\n    });\n\n    return (\n        <main>\n            <CssBaseline/>\n\n            <Box px={2} py={2}>\n                <Box mb={2}>\n                    <Topbar/>\n                </Box>\n\n                <TabNavigation setTab={setTab} tab={tab}/>\n\n                {tab === 0 ?\n                    <Box display=\"flex\" justifyContent=\"center\" py={3}>\n                        <Game\n                            size={settings.size}\n                            rounds={settings.rounds}\n                            colorMap={colorMaps.get(settings.theme)}\n                        />\n                    </Box>\n                    :\n                    <Box py={3}>\n                        <Settings\n                            settings={settings}\n                            setSettings={setSettings}\n                            setTab={setTab}\n                        />\n                    </Box>\n                }\n            </Box>\n        </main>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}