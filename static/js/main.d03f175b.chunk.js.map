{"version":3,"sources":["config.js","game/utils.js","game/Board.js","game/CellSelector.jsx","game/Dialog.jsx","game/GameBoard.jsx","game/Game.jsx","game/Settings.jsx","game/TabNavigation.jsx","game/TabPanel.jsx","game/Topbar.jsx","App.js","reportWebVitals.js","index.js"],"names":["defaultColorMap","Map","shmlasha","kaki","colors","Array","from","keys","standardGame","colorMaps","sizes","Utils","items","Math","floor","random","length","board","options","this","defaultCellColors","size","colorMap","cellColors","i","row","j","push","getRandomItem","color","originalBoard","slice","visitedCells","initialColor","cellsToRepaint","findCellsToRepaint","startCell","neighbours","getNeighbours","cell","cellToString","cellStringsToArr","col","cellStrings","map","str","split","parseInt","filter","includes","initialCell","useStyles","makeStyles","theme","btn","border","cursor","width","height","root","display","justifyContent","breakpoints","down","CellSelector","onColorSelect","onColorSelectRef","useRef","current","classes","cells","useEffect","handleKeydown","e","code","indexOf","cellIndex","document","addEventListener","console","log","removeEventListener","Box","className","title","onClick","style","backgroundColor","get","textAlign","GameDialog","text","open","action","Dialog","maxWidth","onClose","disableBackdropClick","aria-labelledby","aria-describedby","DialogTitle","DialogContent","Typography","DialogActions","mb","Button","variant","useCellStyles","margin","transition","up","props","cellWidth","content","paddingTop","GameBoard","boardData","gameControlsHeight","window","innerHeight","role","Game","rounds","useState","generateRandomBoard","setBoardData","round","setRound","victory","setVictory","setGameControlsHeight","selectNextColor","newBoardData","repaint","isHomogeneous","restartGame","gameControlsId","$gameControls","getElementById","offsetHeight","id","mt","controls","my","Settings","settings","setSettings","setTab","setSize","setRounds","setTheme","FormControl","component","fullWidth","FormLabel","RadioGroup","aria-label","name","value","onChange","target","FormControlLabel","control","Radio","label","TextField","TabNavigation","tab","React","setValue","a11yProps","index","Tabs","event","newValue","textColor","indicatorColor","Tab","TabPanel","children","other","hidden","tooltipIcon","top","right","position","transform","Topbar","rulesDialogOpen","setRulesDialogOpen","alignItems","IconButton","fontSize","App","CssBaseline","px","py","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d03f175b.chunk.js","sourcesContent":["export const defaultColorMap = new Map([\r\n    [\"teal\", \"#19FA8C\"],\r\n    [\"blue\", \"#4C32FA\"],\r\n    [\"yellow\", \"#FADA0C\"],\r\n    [\"red\", \"#FA1E00\"]\r\n]);\r\n\r\nexport const shmlasha = new Map([\r\n    [\"teal\", \"#FFA966\"],\r\n    [\"blue\", \"#CE4DFF\"],\r\n    [\"yellow\", \"#C3FF38\"],\r\n    [\"red\", \"#40E8FF\"]\r\n]);\r\n\r\nexport const kaki = new Map([\r\n    [\"black\", \"#80682E\"],\r\n    [\"poo\", \"#FFE6A8\"],\r\n    [\"purple\", \"#B0CC49\"],\r\n    [\"brown\", \"#CCA749\"]\r\n]);\r\n\r\nexport const colors = Array.from(defaultColorMap.keys());\r\n\r\nexport const gameDescription = `\r\n    The goal is to paint all board cells the same color.\r\n    At the beginning of each round, the color of the top left (initial) cell is selected.\r\n    The newly selected color will spread to other cells which have the same color as the initial one and are adjacent to each other (have a common top, right, bottom or left border). \r\n`;\r\n\r\nexport const title = 'Neighbouring Cells';\r\n\r\nexport const standardGame = {\r\n    rounds: 21,\r\n    size: 18,\r\n    theme: 'Default'\r\n};\r\n\r\nexport const colorMaps = new Map([\r\n    ['Default', defaultColorMap],\r\n    ['Kaki', kaki],\r\n    ['Shmlasha', shmlasha]\r\n]);\r\n\r\nexport const sizes = [18, 24, 32];","export default class Utils {\r\n    static getRandomItem(items) {\r\n        return items[Math.floor(Math.random() * items.length)];\r\n    }\r\n}","import {colors} from '../config.js';\r\nimport Utils from './utils';\r\n\r\nclass Board {\r\n    constructor(options) {\r\n        this.defaultCellColors = options.colors;\r\n    }\r\n\r\n    generateRandomBoard(size, colorMap) {\r\n        const cellColors = Array.from(colorMap.keys());\r\n\r\n        let board = [];\r\n\r\n        for (let i = 0; i < size; ++i) {\r\n            let row = [];\r\n\r\n            for (let j = 0; j < size; ++j) {\r\n                row.push(Utils.getRandomItem(cellColors || this.defaultCellColors));\r\n            }\r\n\r\n            board.push(row);\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    // bootleg bucket fill algorithm, don't judge\r\n    repaint(color, originalBoard) {\r\n        const board = originalBoard.slice();\r\n\r\n        const visitedCells = ['0|0'];\r\n\r\n        const initialColor = board[0][0];\r\n\r\n        let currentCell = [0,0];\r\n\r\n        const findCellsToRepaint = (startCell) => {\r\n            let neighbours = this.getNeighbours(board.length-1, board, initialColor, startCell, visitedCells);\r\n\r\n            if (neighbours.length > 0) {\r\n                for (const cell of neighbours) {\r\n                    visitedCells.push(this.cellToString(cell));\r\n\r\n                    findCellsToRepaint(cell);\r\n                }\r\n            }\r\n\r\n            return this.cellStringsToArr(visitedCells);\r\n        };\r\n\r\n        const cellsToRepaint = findCellsToRepaint(currentCell);\r\n\r\n        for (const [row, col] of cellsToRepaint) {\r\n            board[row][col] = color;\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    cellToString([row, col]) {\r\n        return `${row}|${col}`;\r\n    }\r\n\r\n    cellStringsToArr(cellStrings) {\r\n        return cellStrings\r\n            .map(str => {\r\n                const [row, col] = str.split('|');\r\n\r\n                return [parseInt(row), parseInt(col)];\r\n            });\r\n    }\r\n\r\n    getNeighbours(size, board, color, [row, col], visitedCells) {\r\n        const right = row < size ? [row+1, col] : [];\r\n        const left = row !== 0 ? [row-1, col] : [];\r\n        const top = col !== 0 ? [row, col-1] : [];\r\n        const bottom = col < size ? [row, col+1] : [];\r\n\r\n        return [right, left, top, bottom]\r\n            .filter(cell => cell.length > 0 &&\r\n                    board[cell[0]][cell[1]] === color &&\r\n                    !visitedCells.includes(this.cellToString(cell)));\r\n    }\r\n\r\n    isHomogeneous(board) {\r\n        const initialCell = board[0][0];\r\n\r\n        return board\r\n            .filter(row => row.filter(cell => !(cell === initialCell)).length > 0)\r\n            .length === 0;\r\n    }\r\n}\r\n\r\nconst board = new Board({colors});\r\n\r\nexport default board;","import React, {useEffect, useRef} from 'react';\n\nimport {Box} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nimport {defaultColorMap} from '../config.js';\n\nconst useStyles = makeStyles(theme => ({\n    btn: {\n        border: 'none',\n        cursor: 'pointer',\n        width: 24,\n        height: 24\n    },\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        [theme.breakpoints.down('xs')]: {\n            justifyContent: 'space-around'\n        }\n    }\n}));\n\nexport default function CellSelector({onColorSelect, colorMap=defaultColorMap}) {\n    const onColorSelectRef = useRef(onColorSelect).current;\n    const classes = useStyles();\n\n    const cells = Array.from(colorMap.keys());\n\n    useEffect(() => {\n        function handleKeydown(e) {\n            if (e.code.indexOf('Digit') < 0) {\n                return;\n            }\n\n            const cellIndex = parseInt(e.code.split('Digit')[1]);\n\n            if (cellIndex > 4) {\n                return;\n            }\n\n            onColorSelectRef(cells[cellIndex - 1]);\n        }\n\n        document.addEventListener('keydown', handleKeydown);\n\n        return () => { // second, we return an anonymous clean up function\n            console.log('I clean now...');\n\n            document.removeEventListener('keydown', handleKeydown);\n        };\n    }, [cells, onColorSelectRef]);\n\n    return (\n        <Box className={classes.root}>\n            {cells.map(cell => (\n                <button title={cell} key={cell}\n                        onClick={() => onColorSelect(cell)}\n                        style={{backgroundColor: colorMap.get(cell)}}\n                        className={classes.btn}\n                />\n            ))}\n        </Box>\n    );\n}","import React from 'react';\n\nimport {Box, Typography, Dialog, DialogActions, DialogTitle, DialogContent} from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        textAlign: 'center',\n\n        '& .MuiDialog-paperWidthFalse': {\n            width: \"80%\"\n        }\n    }\n}));\n\nexport default function GameDialog({text, title, open, action}) {\n    const classes = useStyles();\n\n    return (\n        <Dialog\n            open={open}\n            maxWidth={false}\n            onClose={action}\n            disableBackdropClick\n            className={classes.root}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogTitle>{title}</DialogTitle>\n\n            <DialogContent>\n                <Typography>{text}</Typography>\n            </DialogContent>\n\n            <DialogActions>\n                <Box textAlign={\"center\"} width={\"100%\"} mb={1.5}>\n                    <Button onClick={action} variant={\"contained\"}>\n                        Restart\n                    </Button>\n                </Box>\n            </DialogActions>\n        </Dialog>\n    );\n}","import React from \"react\";\r\n\r\nimport {Box} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nimport {defaultColorMap} from '../config.js';\r\n\r\nexport const useCellStyles = makeStyles(theme => ({\r\n    cell: {\r\n        width: '100%',\r\n        margin: 1,\r\n        transition: 'background-color .25s',\r\n\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: props => props.cellWidth\r\n        },\r\n\r\n        '&:after': {\r\n            content: \"''\",\r\n            display: 'block',\r\n            paddingTop: '100%'\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function GameBoard({boardData, onColorSelect, size, gameControlsHeight, colorMap=defaultColorMap}) {\r\n    const cellWidth = (window.innerHeight - (gameControlsHeight || 0) - 240) / size;\r\n\r\n    const classes = useCellStyles({size, cellWidth});\r\n\r\n    return (\r\n        <>\r\n            {boardData.map((row, i) => (\r\n                <Box key={i} display={'flex'}>\r\n                    {row.map((cell, j) => (\r\n                        <div key={`${i}-${j}`}\r\n                             role={\"button\"}\r\n                             onClick={() => onColorSelect(cell)}\r\n                             className={`${classes.cell}`}\r\n                             style={{backgroundColor: colorMap.get(cell)}}\r\n                        />\r\n                    ))}\r\n                </Box>\r\n            ))}\r\n        </>\r\n    );\r\n}","import React, {useEffect, useState} from 'react';\n\nimport {Box, Typography, Button} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nimport board from \"./Board\";\nimport CellSelector from \"./CellSelector\";\nimport GameDialog from \"./Dialog\";\nimport GameBoard from \"./GameBoard\";\n\nconst useStyles = makeStyles(theme => ({\n    board: {\n        [theme.breakpoints.up('sm')]: {\n            display: 'inline-block'\n        }\n    }\n}));\n\nexport default function Game({size, rounds, colorMap}) {\n    const classes = useStyles();\n\n    const [boardData, setBoardData] = useState(board.generateRandomBoard(size, colorMap));\n    const [round, setRound] = useState(1);\n    const [victory, setVictory] = useState(false);\n    const [gameControlsHeight, setGameControlsHeight] = useState();\n\n    function selectNextColor(color) {\n        const newBoardData = board.repaint(color, boardData);\n\n        if (board.isHomogeneous(newBoardData)) {\n            winGame();\n        }\n\n        setBoardData(newBoardData);\n        setRound(round + 1);\n    }\n\n    function restartGame() {\n        setRound(1);\n        setVictory(false);\n        setBoardData(board.generateRandomBoard(size, colorMap));\n    }\n\n    function winGame() {\n        setVictory(true);\n    }\n\n    const gameControlsId = 'game-controls';\n\n    useEffect(() => {\n        const $gameControls = document.getElementById(gameControlsId);\n\n        setBoardData(board.generateRandomBoard(size, colorMap));\n\n        setGameControlsHeight($gameControls && $gameControls.offsetHeight);\n    }, [size, colorMap]);\n\n    return (\n        <Box width=\"100%\" textAlign=\"center\">\n            <Box className={classes.board}>\n                <GameBoard\n                    size={size}\n                    colorMap={colorMap}\n                    boardData={boardData}\n                    onColorSelect={selectNextColor}\n                    gameControlsHeight={gameControlsHeight}\n                />\n            </Box>\n\n            <Box id={gameControlsId} mt={2} className={classes.controls}>\n                <Box textAlign=\"center\">\n                    <Typography variant={\"body1\"}>Round {round}/{rounds}</Typography>\n                </Box>\n\n                <Box my={4}>\n                    <CellSelector onColorSelect={selectNextColor} colorMap={colorMap}/>\n                </Box>\n\n                <Box mt={3} textAlign=\"center\">\n                    <Button variant={\"contained\"} onClick={restartGame}>\n                        Restart\n                    </Button>\n                </Box>\n            </Box>\n\n            <GameDialog\n                title={\"The game beat you\"}\n                text={'Want a revenge?'}\n                action={restartGame}\n                open={round > rounds}\n            />\n\n            <GameDialog\n                title={\"Congratulations!\"}\n                text={'You beat the game'}\n                action={restartGame}\n                open={victory}\n            />\n        </Box>\n    );\n}","import React, {useState} from 'react';\n\nimport {TextField, Box, Radio, FormControl, FormLabel, RadioGroup, FormControlLabel, Button} from \"@material-ui/core\";\n\nimport {colorMaps, sizes} from \"../config\";\n\nexport default function Settings({settings, setSettings, setTab}) {\n    const [size, setSize] = useState(settings.size);\n    const [rounds, setRounds] = useState(settings.rounds);\n    const [theme, setTheme] = useState(settings.theme);\n\n    function onSetSettings() {\n        const newSettings = {\n            size,\n            rounds,\n            theme\n        };\n\n        setSettings(newSettings);\n        setTab(0);\n    }\n\n    return (\n        <Box>\n            <form>\n                <FormControl component=\"fieldset\" fullWidth>\n                    <FormLabel component=\"legend\">Board size</FormLabel>\n\n                    <RadioGroup aria-label=\"board-size\" name=\"board-size\"\n                                value={size}\n                                onChange={e => setSize(parseInt(e.target.value))}\n                    >\n                        {sizes.map(size => (\n                            <FormControlLabel key={size} value={size} control={<Radio />} label={`${size}`} />\n                        ))}\n                    </RadioGroup>\n                </FormControl>\n\n                <Box mt={4}>\n                    <FormControl component=\"fieldset\" fullWidth>\n                        <FormLabel component=\"legend\">Theme</FormLabel>\n\n                        <RadioGroup aria-label=\"board-size\" name=\"board-size\" value={theme}\n                                    onChange={e => setTheme(e.target.value)}\n                        >\n                            {Array.from(colorMaps.keys()).map((theme) => (\n                                <FormControlLabel key={theme} value={theme} control={<Radio />} label={theme} />\n                            ))}\n                        </RadioGroup>\n                    </FormControl>\n                </Box>\n\n                <Box mt={4}>\n                    <FormControl fullWidth>\n                        <TextField\n                            id=\"rounds\"\n                            label=\"Number of rounds\"\n                            size={\"small\"}\n                            value={rounds || ''}\n                            variant=\"outlined\"\n                            onChange={e => setRounds(parseInt(e.target.value))}\n                        />\n                    </FormControl>\n                </Box>\n\n                <Box mt={4}>\n                    <Button variant={\"contained\"} onClick={onSetSettings}>\n                        Save & Start\n                    </Button>\n                </Box>\n            </form>\n        </Box>\n    );\n}","import React from \"react\";\n\nimport {Box, Tab, Tabs} from \"@material-ui/core\";\n\nexport function TabNavigation({setTab, tab}) {\n    const [value, setValue] = React.useState(tab);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n        setTab(newValue);\n    };\n\n    function a11yProps(index) {\n        return {\n            id: `tab-${index}`,\n            'aria-controls': `tabpanel-${index}`\n        };\n    }\n\n    React.useEffect(() => {\n        setValue(tab);\n    }, [tab]);\n\n    return (\n        <Box>\n            <Tabs\n                value={value}\n                onChange={handleChange}\n                variant=\"fullWidth\"\n                textColor=\"primary\"\n                indicatorColor=\"primary\"\n            >\n                <Tab label=\"Game\" {...a11yProps(0)} />\n                <Tab label=\"Settings\" {...a11yProps(1)}/>\n            </Tabs>\n        </Box>\n    );\n}","import React from \"react\";\r\n\r\nexport function TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index &&\r\n            <>\r\n                {children}\r\n            </>\r\n            }\r\n        </div>\r\n    );\r\n}","import React, {useState} from \"react\";\n\nimport {Box, Typography, IconButton, DialogTitle, DialogActions, DialogContent} from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport InfoIcon from '@material-ui/icons/Info';\n\nimport {title, gameDescription} from \"../config\";\n\nconst useStyles = makeStyles(theme => ({\n    tooltipIcon: {\n        top: '50%',\n        right: '0',\n        position: 'absolute',\n        transform: 'translateY(-50%)'\n    }\n}));\n\nexport default function Topbar() {\n    const classes = useStyles();\n\n    const [rulesDialogOpen, setRulesDialogOpen] = useState(false);\n\n    return (\n        <Box textAlign=\"center\">\n            <Box position=\"relative\" display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                <Box>\n                    <Typography variant={\"h5\"}>{title}</Typography>\n\n                    <Box className={classes.tooltipIcon}>\n                        <IconButton onClick={() => setRulesDialogOpen(true)}>\n                            <InfoIcon fontSize={\"small\"} />\n                        </IconButton>\n                    </Box>\n                </Box>\n            </Box>\n\n            <Dialog\n                open={rulesDialogOpen}\n                maxWidth={'md'}\n                onClose={() => setRulesDialogOpen(false)}\n            >\n                <DialogTitle>How to play</DialogTitle>\n\n                <DialogContent>\n                    {gameDescription}\n                </DialogContent>\n\n                <DialogActions>\n                    <Button onClick={() => setRulesDialogOpen(false)}>\n                        Got it\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Box>\n    );\n}","import './App.css';\nimport React from 'react';\n\nimport {Box} from \"@material-ui/core\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport {colorMaps, standardGame} from \"./config\";\nimport Game from \"./game/Game\";\nimport Settings from \"./game/Settings\";\nimport {TabNavigation} from \"./game/TabNavigation\";\nimport {TabPanel} from \"./game/TabPanel\";\nimport Topbar from \"./game/Topbar\";\n\nfunction App() {\n    const [tab, setTab] = React.useState(0);\n\n    const [settings, setSettings] = React.useState({\n        size: standardGame.size,\n        theme: standardGame.theme,\n        rounds: standardGame.rounds\n    });\n\n    return (\n        <main>\n            <CssBaseline/>\n\n            <Box px={2} py={2}>\n                <Box mb={2}>\n                    <Topbar/>\n                </Box>\n\n                <TabNavigation setTab={setTab} tab={tab}/>\n\n                <div>\n                    <TabPanel value={tab} index={0}>\n                        <Box id=\"game-tab-content\" display=\"flex\" justifyContent=\"center\" py={3}>\n                            <Game\n                                size={settings.size}\n                                rounds={settings.rounds}\n                                colorMap={colorMaps.get(settings.theme)}\n                            />\n                        </Box>\n                    </TabPanel>\n\n                    <TabPanel value={tab} index={1}>\n                        <Box id=\"settings-tab-content\" py={3}>\n                            <Settings\n                                settings={settings}\n                                setSettings={setSettings}\n                                setTab={setTab}\n                            />\n                        </Box>\n                    </TabPanel>\n                </div>\n            </Box>\n        </main>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}